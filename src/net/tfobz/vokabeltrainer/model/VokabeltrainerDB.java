package net.tfobz.vokabeltrainer.model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;

/**
 * Hilfsklasse zum Zugriff auf eine HsqlDB-Datenbank. Dabei muss das Archiv
 * hsqldb.jar in den Classpath der Anwendung aufgenommen werden. Das Archiv ist
 * unter http://hsqldb.org/ zu finden
 * @author Michael 
 */
public class VokabeltrainerDB
{
	protected static final String DB_NAME = "lernkarteien";

	protected static final String CREATE_EINSTELLUNGEN = "CREATE TABLE if not exists einstellungen( "
			+ "  elnummerstandard INTEGER, "
			+ "  elernkarteienmiterinnerung BOOLEAN DEFAULT 0, "
			+ "  FOREIGN KEY (elnummerstandard) REFERENCES lernkarteien(lnummer) "
			+ "    ON DELETE SET NULL ON UPDATE CASCADE " + "  );";
	protected static final String CREATE_LERNKARTEIEN = "CREATE TABLE if not exists lernkarteien( "
			+ "  lnummer INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) "
			+ "    NOT NULL PRIMARY KEY, "
			+ "  lbeschreibung VARCHAR(500) NOT NULL UNIQUE, "
			+ "  lworteinsbeschreibung VARCHAR(100) NOT NULL, "
			+ "  lwortzweibeschreibung VARCHAR(100) NOT NULL, "
			+ "  lrichtung BOOLEAN DEFAULT 1 NOT NULL, "
			+ "  lgrosskleinschreibung BOOLEAN DEFAULT 0 NOT NULL " + "  );";
	protected static final String CREATE_FAECHER = "CREATE TABLE if not exists faecher( "
			+ "  fnummer INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) "
			+ "    NOT NULL PRIMARY KEY, " + "  fbeschreibung VARCHAR(500), "
			+ "  ferinnerung INTEGER DEFAULT 1, " + "  fgelerntam DATE, "
			+ "  lnummer INTEGER NOT NULL, "
			+ "  FOREIGN KEY (lnummer) REFERENCES lernkarteien(lnummer) "
			+ "    ON DELETE CASCADE ON UPDATE CASCADE " + "  );";
	protected static final String CREATE_KARTEN = "CREATE TABLE if not exists karten( "
			+ "  knummer INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) "
			+ "    NOT NULL PRIMARY KEY, " 
			+ "  kworteins VARCHAR(100) NOT NULL, "
			+ "  kwortzwei VARCHAR(100) NOT NULL, " 
			+ "  fnummer INTEGER NOT NULL, "
			+ "  FOREIGN KEY (fnummer) REFERENCES faecher(fnummer) "
			+ "    ON DELETE CASCADE ON UPDATE CASCADE " + "  );";

	protected static final String DROP_EINSTELLUNGEN = "DROP TABLE einstellungen IF EXISTS;";
	protected static final String DROP_LERNKARTEIEN = "DROP TABLE lernkarteien IF EXISTS;";
	protected static final String DROP_FAECHER = "DROP TABLE faecher IF EXISTS;";
	protected static final String DROP_KARTEN = "DROP TABLE karten IF EXISTS;";

	protected static final String INSERT_LERNKARTEI1 = "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) "
			+ "  VALUES('Vokabeltrainer Deutsch Englisch','Deutsch','Englisch',true,false);";
	protected static final String INSERT_LERNKARTEI2 = "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) "
			+ "  VALUES('Vokabeltrainer Deutsch Italienisch','Deutsch','Italienisch',false,true);";
	protected static final String INSERT_LERNKARTEI3 = "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) "
			+ "  VALUES('Vokabeltrainer Deutsch Französisch','Deutsch','Französisch',false,true);";
	protected static final String INSERT_FACH11 = "INSERT INTO faecher(fbeschreibung, ferinnerung, fgelerntam, lnummer) "
			+ "  VALUES('Fach 1',0,'" + getActualDate() + "', 1);";
	protected static final String INSERT_FACH21 = "INSERT INTO faecher(fbeschreibung, ferinnerung, fgelerntam, lnummer) "
			+ "  VALUES('Fach 1',1,'" + getActualDate() + "', 2);";
	protected static final String INSERT_KARTE111 = "INSERT INTO karten(kworteins, kwortzwei, fnummer) "
			+ "  VALUES('Haus','house',1);";

	/**
	 * Die Methode zeigt, wie die Klasse VokabeltrainerDB verwendet werden kann, um auf die
	 * Datenbank zuzugreifen
	 * @param args
	 */
	public static void main(String[] args) {
		// Gibt alle Lernkarteien aus
		List<Lernkartei> lernkarteien = VokabeltrainerDB.getLernkarteien();
		for (Lernkartei lernkartei: lernkarteien)
			System.out.println(lernkartei);
		// Holt sich die erste Lernkartei aus der Liste
		Lernkartei lernkartei = lernkarteien.get(0);
		// Holt sich alle Fächer dieser Lernkartei
		List<Fach> faecher = VokabeltrainerDB.getFaecher(lernkartei.getNummer());
		for (Fach fach: faecher)
			System.out.println(fach);
		// Holt sich das erste Fach aus der Liste
		Fach fach = faecher.get(0);
		// Holt sich eine Karte aus dem Fach
		Karte k = VokabeltrainerDB.getZufaelligeKarte(lernkartei.getNummer(), fach.getNummer());
		System.out.println(k);
	}
	
	/**
	 * ACHTUNG: In die Einstellungen-Tabelle wird ein Datensatz hineingeschrieben
	 */
	protected static void erstellenTabellen(){
		Connection con = null;
		Statement stmt = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			stmt.executeUpdate(CREATE_LERNKARTEIEN);
			stmt.executeUpdate(CREATE_FAECHER);
			stmt.executeUpdate(CREATE_KARTEN);
			stmt.executeUpdate(CREATE_EINSTELLUNGEN);
			String sql = "INSERT INTO einstellungen(elnummerstandard, elernkarteienmiterinnerung) "
					+ "  VALUES (NULL, FALSE);";
			stmt.executeUpdate(sql);
			con.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
	}

	protected static void loeschenTabellen() {
		Connection con = null;
		Statement stmt = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			stmt.executeUpdate(DROP_EINSTELLUNGEN);
			stmt.executeUpdate(DROP_KARTEN);
			stmt.executeUpdate(DROP_FAECHER);
			stmt.executeUpdate(DROP_LERNKARTEIEN);
			con.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
	}

	protected static void hinzufuegenTestdaten() {
		Connection con = null;
		Statement stmt = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			stmt.executeUpdate(INSERT_LERNKARTEI1);
			stmt.executeUpdate(INSERT_LERNKARTEI2);
			stmt.executeUpdate(INSERT_LERNKARTEI3);
			stmt.executeUpdate(INSERT_FACH11);
			stmt.executeUpdate(INSERT_FACH21);
			stmt.executeUpdate(INSERT_KARTE111);
			con.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
	}

	protected static Connection getConnection() throws SQLException {
		Connection ret = null;
		try {
			// Registrieren des JDBC-Treibers für HSQLDB
			Class.forName("org.hsqldb.jdbcDriver");
		} catch (ClassNotFoundException e) {
			throw new SQLException("HSQLDB-Treiber nicht gefunden");
		}
		// Definition der Verbindungseigenschaften
		Properties p = new Properties();
		// Systemadministrator "SA" mit Passwort "" meldet sich an
		p.setProperty("user", "SA");
		p.setProperty("password", "");
		// Wenn das letzte Verbindungsobjekt zur Datenbank geschlossen wird,
		// wird ein SHUTDOWN durchgeführt, welches Datenänderungen in
		// .script-Datei schreibt
		p.setProperty("shutdown", "true");
		// Datenbank wird angelegt falls nicht vorhanden
		// Öffnen der Datenbankverbindung. "file" bedeutet dass die Datenbank
		// aus Memory-Tabellen besteht. "mem" würde ausschließlich Temp-Tabellen
		// anlegen
		ret = DriverManager.getConnection("jdbc:hsqldb:file:" + DB_NAME, p);
		ret.setAutoCommit(false);
		return ret;
	}

	/**
	 * Holt die Lernkartei welche die übergebene Nummer hat aus der Datenbank
	 * @param nummer
	 * @return null falls Lernkartei nicht gefunden werden kann
	 */
	public static Lernkartei getLernkartei(int nummerLernkartei) {
		Lernkartei ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql = "SELECT lnummer, lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung "
					+ "  FROM lernkarteien"
					+ "  WHERE lnummer = "
					+ nummerLernkartei
					+ ";";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				int nummer = rs.getInt("lnummer");
				String beschreibung = rs.getString("lbeschreibung");
				String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
				String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
				boolean richtung = rs.getBoolean("lrichtung");
				boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
				ret = new Lernkartei(nummer, beschreibung, wortEinsBeschreibung,
						wortZweiBeschreibung, richtung, grossKleinschreibung);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try {	rs.close();	} catch (Exception e) {	;	}
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}

	/**
	 * Liefert eine Liste aller Lernkarteien
	 * @return null falls ein Datenbankfehler aufgetreten ist<br>
	 *         eine leere ArrayList falls keine Lernkarteien zu finden sind
	 */
	public static List<Lernkartei> getLernkarteien() {
		ArrayList<Lernkartei> ret = new ArrayList();
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql = "SELECT lnummer, lbeschreibung, lworteinsbeschreibung, lwortzweibeschreibung, lrichtung, lgrosskleinschreibung "
					+ "  FROM lernkarteien;";
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				int nummer = rs.getInt("lnummer");
				String beschreibung = rs.getString("lbeschreibung");
				String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
				String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
				boolean richtung = rs.getBoolean("lrichtung");
				boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
				Lernkartei l = new Lernkartei(nummer, beschreibung,
						wortEinsBeschreibung, wortZweiBeschreibung, richtung,
						grossKleinschreibung);
				ret.add(l);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try {	rs.close();	} catch (Exception e) {	;	}
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}

	/**
	 * Liefert zur übergebenen Lernkartei die Fächer
	 * @return null falls die Lernkartei nicht existiert oder Datenbankfehler
	 * aufgetreten ist<br>
	 * eine leere ArrayList wenn keine Fächer zur Lernkartei existieren
	 */
	public static List<Fach> getFaecher(int nummerLernkartei) {
		ArrayList<Fach> ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql = 
					"SELECT * " +
					"  FROM lernkarteien " +
					"  WHERE lnummer = " + nummerLernkartei + ";";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				ret = new ArrayList();
				sql = "SELECT fnummer, fbeschreibung, ferinnerung, fgelerntam, lnummer "
						+ "  FROM faecher "
						+ "  WHERE lnummer = "
						+ nummerLernkartei
						+ "  ORDER BY fnummer;";
				rs = stmt.executeQuery(sql);
				while (rs.next()) {
					int nummer = rs.getInt("fnummer");
					String beschreibung = rs.getString("fbeschreibung");
					int erinnerung = rs.getInt("ferinnerung");
					Date gelerntAm = rs.getDate("fgelerntam");
					Fach f = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
					ret.add(f);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try { rs.close(); } catch (Exception e) { ; }
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}

	/**
	 * Sucht das Fach mit der übergebenen Nummer. Dabei muss das Fach zur
	 * Lernkartei mit der übergebenen Nummer gehören
	 * @param nummerLernkartei
	 * @param nummerFach
	 * @return null falls Fach oder Lernkartei nicht vorhanden sind oder Datenbankfehler aufgetreten ist
	 */
	public static Fach getFach(int nummerLernkartei, int nummerFach) {
		Fach ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql = "SELECT fnummer, fbeschreibung, ferinnerung, fgelerntam, lnummer "
					+ "  FROM faecher "
					+ "  WHERE fnummer = " + nummerFach + " " 
					+ "    AND lnummer = " + nummerLernkartei+ ";";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				int nummer = rs.getInt("fnummer");
				String beschreibung = rs.getString("fbeschreibung");
				int erinnerung = rs.getInt("ferinnerung");
				Date gelerntAm = rs.getDate("fgelerntam");
				ret = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try { rs.close();	} catch (Exception e) {	; }
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
  	return ret;
	}
	
	/**
	 * Sucht das Fach mit der übergebenen Nummer
	 * @param nummerFach
	 * @return null falls Fach nicht vorhanden sind oder Datenbankfehler aufgetreten ist
	 */
  public static Fach getFach(int nummerFach) {
		Fach ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql = "SELECT fnummer, fbeschreibung, ferinnerung, fgelerntam "
					+ "  FROM faecher "
					+ "  WHERE fnummer = " + nummerFach + ";";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				int nummer = rs.getInt("fnummer");
				String beschreibung = rs.getString("fbeschreibung");
				int erinnerung = rs.getInt("ferinnerung");
				Date gelerntAm = rs.getDate("fgelerntam");
				ret = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try { rs.close();	} catch (Exception e) {	; }
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
  	return ret;
	}
	
	/**
	 * Liefert eine zufällige Karte aus dem übergebenen Fach der übergebenen Lernkartei. Es wird 
	 * nicht abgespeichert, dass in diesem Fach heute gelernt wurde. Das Fach muss zur aktuellen 
	 * Lernkartei gehören
	 * @param nummerLernkartei
	 * @param nummerFach
	 * @return null falls das Fach und/oder Lernkartei nicht existiert oder
	 * wenn es keine Karte in diesem Fach gibt oder wenn ein Datenbankfehler auftritt
	 */
	public static Karte getZufaelligeKarte(int nummerLernkartei, int nummerFach) {
	  Karte ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql =
				 "SELECT k.knummer, k.kworteins, k.kwortzwei, l.lrichtung, l.lgrosskleinschreibung " +
				 "  FROM karten k, faecher f, lernkarteien l " +
				 "  WHERE k.fnummer = f.fnummer " +
				 "    AND l.lnummer = f.lnummer " +
				 "    AND f.fnummer = " + nummerFach + " " +
				 "    AND f.lnummer = " + nummerLernkartei + " " +
				 "  ORDER BY RAND() " +
				 "  LIMIT 1;";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
			  int nummer = rs.getInt("knummer");
			  String wortEins = rs.getString("kworteins");
				String wortZwei = rs.getString("kwortzwei");
				boolean richtung = rs.getBoolean("lrichtung");
				boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
				ret = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung);
				con.commit();
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try { rs.close(); } catch (Exception e) { ; }
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Liefert die Karte mit der übergebenen Nummer
	 * @param nummerKarte
	 * @return null falls Datenbankfehler aufgetreten ist oder die 
	 * Karte nicht gefunden werden konnte
	 */
	public static Karte getKarte(int nummerKarte) {
		Karte ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql = "SELECT k.knummer, k.kworteins, k.kwortzwei, l.lrichtung, l.lgrosskleinschreibung "
					+ "  FROM karten k, faecher f, lernkarteien l " 
					+ "  WHERE k.fnummer = f.fnummer AND " 
					+ "    f.lnummer = l.lnummer AND " 
					+ "    k.knummer = " + nummerKarte + ";";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				int nummer = rs.getInt("knummer");
				String wortEins = rs.getString("kworteins");
				String wortZwei = rs.getString("kwortzwei");
				boolean richtung = rs.getBoolean("lrichtung");
				boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
				ret = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try { rs.close();	} catch (Exception e) {	; }
			try {	stmt.close();	} catch (Exception e) {	;	}
			try {	con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Schiebt eine Karte ein Fach nach hinten und merkt sich, dass in der Lernkartei
	 * gelernt wurde
	 * @param karte
	 * @return 0 falls erfolgreich<br>
	 * -1 falls Karte nicht abgespeichert oder Datenbankfehler aufgetreten ist<br>
	 * -2 falls kein Fach existiert hinter dem Fach aus dem die Karte stammt
	 */
	public static int setKarteRichtig(Karte karte) {
		int ret = -1;
		if (karte != null && karte.getNummer() != -1) {
			Connection con = null;
			Statement stmt = null;
			ResultSet rs = null;
			try {
				con = getConnection();
				stmt = con.createStatement();
				String sql =
					 "SELECT fnummer " +
					 "  FROM faecher f2 " +
					 "  WHERE fnummer > " +
					 "    (SELECT f1. fnummer " +
					 "      FROM karten k1, faecher f1 " +
					 "      WHERE k1.fnummer = f1.fnummer AND " +
					 "        f2.lnummer = f1.lnummer AND " +
					 "        knummer = " + karte.getNummer() + ") " +
					 "  ORDER BY fnummer;";
				rs = stmt.executeQuery(sql);
				if (!rs.next())
					// Es existiert noch kein Fach hinter dem Fach in dem Karte steckt
					ret = -2;
				else {
					int fachNummer = rs.getInt("fnummer");
					sql =
							"UPDATE faecher " +
							"  SET fgelerntam = NOW() " +
							"  WHERE fnummer = " +
							"    (SELECT fnummer " +
							"      FROM karten " +
							"      WHERE knummer = " + karte.getNummer() + ");";
					if (stmt.executeUpdate(sql) == 1) {
						sql =
							"UPDATE karten " +
							"  SET fnummer = " + fachNummer +
							"  WHERE knummer = " + karte.getNummer() + ";";
						if (stmt.executeUpdate(sql) == 1) {
							ret = 0;
							con.commit();
						}
					}
				}
			} catch (SQLException e) {
				e.printStackTrace();
				ret = -1;
			} finally {
				try { rs.close(); } catch (Exception e) { ; }
				try { stmt.close(); } catch (Exception e) { ; }
				try { con.close(); } catch (Exception e) { ; }
			}
		}
		return ret;
	}
	
	/**
	 * Schiebt die Karte ins erste Fach der Lernkartei und merkt sich, dass in der Lernkartei
	 * gelernt wurde
	 * @param karte
	 * @return 0 falls erfolgreich<br>
	 * -1 falls Karte noch nicht abgespeichert wurde oder Datenbankfehler aufgetreten ist
	 */
	public static int setKarteFalsch(Karte karte) {
		int ret = -1;
		if (karte != null && karte.getNummer() != -1) {
			Connection con = null;
			Statement stmt = null;
			ResultSet rs = null;
			try {
			  con = getConnection();
				stmt = con.createStatement();
				String sql =
					 "SELECT fnummer " +
					 "  FROM faecher " +
					 "  WHERE lnummer = " +
					 "    (SELECT f.lnummer " +
					 "      FROM karten k, faecher f " +
					 "      WHERE k.fnummer = f.fnummer AND " +
					 "        knummer = " + karte.getNummer() + ") " +
					 "  ORDER BY fnummer;";
				rs = stmt.executeQuery(sql);
				rs.next();
				int fachNummer = rs.getInt("fnummer");
				sql =
					 "UPDATE karten " +
					 "  SET fnummer = " + fachNummer +
					 "  WHERE knummer = " + karte.getNummer() + ";";
				if (stmt.executeUpdate(sql) == 1) {
					sql =
							"UPDATE faecher " +
							"  SET fgelerntam = NOW() " +
							"  WHERE fnummer = " +
							"    (SELECT fnummer " +
							"      FROM karten " +
							"      WHERE knummer = " + karte.getNummer() + ");";
					if (stmt.executeUpdate(sql) == 1) {
						ret = 0;
						con.commit();
					}
				}
			} catch (SQLException e) {
				e.printStackTrace();
				ret = -1;
			} finally {
				try { rs.close(); } catch (Exception e) { ; }
				try { stmt.close(); } catch (Exception e) { ; }
				try { con.close(); } catch (Exception e) { ; }
			}
		}
		return ret;
	}
	
	/**
	 * Fügt neues Fach zur aktuellen Lernkartei am Ende hinzu. Im Fach wird die Nummer gesetzt,
	 * welche vom Datenbanksystem vergeben wird. Im Fach wird gelerntAm auf das heutige
	 * Datum gesetzt falls im übergebenen Objekt gelerntAm nicht gesetzt wurde. Wurde die 
	 * Fachbeschreibung nicht gesetzt, so wird diese auf "Fach <Nummer in Lernkartei>" gesetzt
	 * @param nummerLernkartei
	 * @param fach
	 * @return -1 falls Lernkartei nicht existiert oder falls Fach schon in Datebank existiert
	 */
	public static int hinzufuegenFach(int nummerLernkartei, Fach fach) {
	  int ret = -1;
		if (fach != null && fach.getNummer() == -1 && getLernkartei(nummerLernkartei) != null) {
			Connection con = null;
			Statement stmt = null;
			ResultSet rs = null;
			try {
				con = getConnection();
				stmt = con.createStatement();
				String sqlBeschreibung = null;
				if (fach.getBeschreibung() == null || fach.getBeschreibung().length() == 0) {
					sqlBeschreibung = "'Fach " + (int)(getFaecher(nummerLernkartei).size() + 1) + "'";
				} else
					sqlBeschreibung = "'" + fach.getBeschreibung() + "'";
				String sqlGelerntAm = null;
				if (fach.getGelerntAm() == null)
					sqlGelerntAm = "NOW()";
				else
					sqlGelerntAm = "'" + VokabeltrainerDB.convertToString(fach.getGelerntAm()) + "'";
				String sql =
					 "INSERT INTO faecher(fbeschreibung, ferinnerung, fgelerntam, lnummer) " +
					 "  VALUES(" + sqlBeschreibung + ", " + fach.getErinnerungsIntervall() +
					 "    , " + sqlGelerntAm + ", " + nummerLernkartei + ");";
				if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0)
					ret = -1;
				else {
					rs = stmt.getGeneratedKeys();
					rs.next();
					fach.nummer = rs.getInt(1);
					ret = 0;
					con.commit();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				ret = -1;
			} finally {
				try { rs.close(); } catch (Exception e) { ; }
				try { stmt.close(); } catch (Exception e) { ; }
				try { con.close(); } catch (Exception e) { ; }
			}
		}
		return ret;
	}
	 
	/**
	 * Ändert die Inhalte eines bestehenden Faches. Dabei können nur die Beschreibung,
	 * die Erinnerung und gelerntAm geändert werden
	 * @param fach
	 * @return -1 falls Fach noch nicht in Datenbank exisitert oder Datenbankfehler<br>
	 * -2 falls Validierungsfehler aufgetreten ist
	 * aufgetreten ist
	 */
	public static int aendernFach(Fach fach) {
	  int ret = -1;
	  if (fach != null && fach.getNummer() != -1) {
	  	fach.validiere();
	  	if (fach.getFehler() != null)
	  		ret = -2;
	  	else {
			  Connection con = null;
			  Statement stmt = null;
			  try {
			  	con = getConnection();
			  	stmt = con.createStatement();
			  	String sqlBeschreibung = null;
			  	if (fach.getBeschreibung() == null || fach.getBeschreibung().length() == 0)
			  		sqlBeschreibung = "fbeschreibung = NULL";
			  	else
			  		sqlBeschreibung = "fbeschreibung = '" + fach.getBeschreibung() + "'";
			  	String sqlGelerntAm = null;
			  	if (fach.getGelerntAm() == null)
			  		sqlGelerntAm = "fgelerntam = NULL";
			  	else
			  		sqlGelerntAm = "fgelerntam = '" +
			  				VokabeltrainerDB.convertToString(fach.getGelerntAm()) + "'";
			  	String sql =
						 "UPDATE faecher " +
						 "  SET " + sqlBeschreibung + ", " + sqlGelerntAm + ", " +
						 "    ferinnerung = " + fach.getErinnerungsIntervall() +
						 "  WHERE fnummer = " + fach.getNummer() + ";";
			  	if (stmt.executeUpdate(sql) == 0)
			  		ret = -1;
			  	else {
			  		ret = 0;
			  		con.commit();
			  	}
			  } catch (SQLException e) {
			  	e.printStackTrace();
			  	ret = -1;
			  } finally {
			  	try { stmt.close(); } catch (Exception e) { ; }
			  	try { con.close(); } catch (Exception e) { ; }
			  }
	  	}
	  }
	  return ret;
	}
	
	/**
	 * Fügt neue Lernkartei in die Datenbank ein. Die Lernkartei erhält die Nummer,
	 * welche diese in der Datenbank hat
	 * @param lernkartei
	 * @return -1 falls Datenbankfehler aufgetreten ist<br>
	 * -2 falls Validierungsfehler aufgetreten ist oder falls Lernkartei mit
	 * dieser Beschreibung bereits existiert. In diesem Fall wird in Beschreibung eine 
	 * entsprechende Fehlermeldung gesetzt
	 */
	public static int hinzufuegenLernkartei(Lernkartei lernkartei) {
		int ret = -1;
		if (lernkartei != null && lernkartei.getNummer() == -1) {
			lernkartei.validiere();
			if (lernkartei.getFehler() != null)
				ret = -2;
			else {
				Connection con = null;
				Statement stmt = null;
				ResultSet rs = null;
				try {
					con = getConnection();
					stmt = con.createStatement();
					String sqlBeschreibung = null;
					if (lernkartei.getBeschreibung() == null ||
							lernkartei.getBeschreibung().length() == 0)
						sqlBeschreibung = "NULL";
					else
						sqlBeschreibung = "'" + lernkartei.getBeschreibung() + "'";
					String sql =
						 "INSERT INTO lernkarteien(lbeschreibung, lworteinsbeschreibung, " +
						 "  lwortzweibeschreibung, lrichtung, lgrosskleinschreibung) " +
						 "  VALUES(" + sqlBeschreibung + ", '" +
						 lernkartei.getWortEinsBeschreibung() + "', '" +
						 lernkartei.getWortZweiBeschreibung() + "', " + lernkartei.getRichtung() +
						 ", " +
						 lernkartei.getGrossKleinschreibung() + ");";
					if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0)
						ret = -1;
					else {
						rs = stmt.getGeneratedKeys();
						rs.next();
						lernkartei.nummer = rs.getInt(1);
						ret = 0;
						con.commit();
					}
				} catch (SQLException e) {
					if (e.getErrorCode() == -104) {
						if (lernkartei.fehler == null)
							lernkartei.fehler = new Hashtable<String, String>();
					 	lernkartei.fehler.put("beschreibung",
					 			 "Es existiert bereits Lernkartei mit gleicher Beschreibung");
					 	ret = -2;
					} else {
						e.printStackTrace();
						ret = -1;
					}
				} finally {
					try { rs.close(); } catch (Exception e) { ; }
					try { stmt.close(); } catch (Exception e) { ; }
					try { con.close(); } catch (Exception e) { ; }
				}
			}
		}
		return ret;
	}
	
	/**
	 * Ändert eine bestehende Lernkartei in der Datenbank
	 * @param lernkartei
	 * @return -1 falls Lernkartei nicht in Datenbank existiert oder Datenbankfehler
	 * aufgetreten ist<br>
	 * -2 falls Validierungsfehler aufgetreten ist und falls Lernkartei mit dieser
	 * Beschreibung schon existiert. Im letzteren Fall wird für die Beschreibung eine
	 * entsprechende Fehlermeldung gesetzt
	 */
	public static int aendernLernkartei(Lernkartei lernkartei) {
		int ret = -1;
		if (lernkartei != null && lernkartei.getNummer() != -1) {
			lernkartei.validiere();
			if (lernkartei.getFehler() != null)
				ret = -2;
			else {
				Connection con = null;
				Statement stmt = null;
				try {
					con = getConnection();
					stmt = con.createStatement();
					String sqlBeschreibung = null;
					if (lernkartei.getBeschreibung() == null ||
							 lernkartei.getBeschreibung().length() == 0)
						sqlBeschreibung = "NULL";
					else
						sqlBeschreibung = "'" + lernkartei.getBeschreibung() + "'";
					String sql =
							 "UPDATE lernkarteien " +
							 "  SET lbeschreibung = " + sqlBeschreibung + ", " +
							 "    lworteinsbeschreibung = '" + lernkartei.getWortEinsBeschreibung() +
							 "', " +
							 "    lwortzweibeschreibung = '" + lernkartei.getWortZweiBeschreibung() +
							 "', " +
							 "    lrichtung = " + lernkartei.getRichtung() + ", " +
							 "    lgrosskleinschreibung = " + lernkartei.getGrossKleinschreibung() +
							 "  WHERE lnummer = " + lernkartei.getNummer() + ";";
					if (stmt.executeUpdate(sql) == 0)
						ret = -1;
					else {
						ret = 0;
						con.commit();
					}
				} catch (SQLException e) {
					if (e.getErrorCode() == -104) {
						if (lernkartei.fehler == null)
							 lernkartei.fehler = new Hashtable<String, String>();
						lernkartei.fehler.put("beschreibung",
								 "Es existiert bereits Lernkartei mit gleicher Beschreibung");
						ret = -2;
					} else {
						e.printStackTrace();
						ret = -1;
					}
				} finally {
					try { stmt.close(); } catch (Exception e) { ; }
					try { con.close(); } catch (Exception e) { ; }
				}
			}
		}
		return ret;
	}
	
	/**
	 * Löscht die übergebene Lernkartei aus der Datenbank. Dabei werden
	 * auch alle Fächer und Karten die zu dieser Lernkartei gehören mit
	 * gelöscht
	 * @param nummerLernkartei
	 * @return -1 falls Lernkartei nicht gefunden wurde oder ein Datenbankfehler 
	 * aufgetreten ist
	 */
	public static int loeschenLernkartei(int nummerLernkartei) {
		int ret = -1;
		Connection con = null;
		Statement stmt = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql =
					"DELETE FROM lernkarteien " +
					"  WHERE lnummer = " + nummerLernkartei + ";";
			if (stmt.executeUpdate(sql) == 0)
				ret = -1;
			else {
				ret = 0;
				con.commit();
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = -1;
		} finally {
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Fügt eine neue Karte in das erste Fach der übergebenen Lernkartei ein. Die
	 * Karte erhält beim Einfügen die Nummer welche diese in der Datenbank hat
	 * @param nummerLernkartei
	 * @param karte
	 * @return -1 wenn Datenbankfehler aufgetreten ist<br>
	 * -2 falls Karte nicht vollständig ist<br>
	 * -3 falls Lernkartei nicht existiert<br>
	 * -4 falls kein Fach in der Lernkartei existiert<br>
	 * -5 falls dieselbe Karte in der Lernkartei in irgendeinem Fach schon existiert<br>
	 */
	public static int hinzufuegenKarte(int nummerLernkartei, Karte karte) {
		int ret = -1;
		if (karte != null && karte.getNummer() == -1) {
			karte.validiere();
			if (karte.getFehler() != null)
				ret = -2;
			else {
				List<Fach> faecher = getFaecher(nummerLernkartei);
		 	 	if (faecher == null)
		 	 		ret = -3;
		 	 	else 
		 	 		if (faecher.size() == 0)
		 	 			ret = -4;
		 	 		else {
			 	 		Connection con = null;
			 	 		Statement stmt = null;
			 	 		ResultSet rs = null;
			 	 		try {
			 	 			con = getConnection();
			 	 			stmt = con.createStatement();
			 	 			String sql = 
								 "SELECT lgrosskleinschreibung " +
								 "  FROM lernkarteien " +
								 "  WHERE lnummer = " + nummerLernkartei + ";";
			 	 			rs = stmt.executeQuery(sql);
			 	 			rs.next();
		 	 				if (rs.getBoolean(1))
		 	 					sql =
							 		 "SELECT COUNT(*) " +
									 "  FROM karten k, faecher f, lernkarteien l " +
									 "  WHERE k.fnummer = f.fnummer AND " +
									 "    f.lnummer = " + nummerLernkartei + " AND " +
									 "    kworteins = '" + karte.getWortEins() + "' AND " +
									 "    kwortzwei = '" + karte.getWortZwei() + "';";
		 	 				else
		 	 					sql =
									 "SELECT COUNT(*) " +
									 "  FROM karten k, faecher f, lernkarteien l " +
									 "  WHERE k.fnummer = f.fnummer AND " +
									 "    f.lnummer = " + nummerLernkartei + " AND " +
									 "    LOWER(kworteins) = '" + karte.getWortEins().toLowerCase() + "' AND " +
									 "    LOWER(kwortzwei) = '" + karte.getWortZwei().toLowerCase() + "';";
		 	 				rs = stmt.executeQuery(sql);
		 	 				rs.next();
		 	 				if (rs.getInt(1) != 0)
		 	 					ret = -5;
		 	 				else {
		 	 					sql =
									 "INSERT INTO karten(kworteins, kwortzwei, fnummer) " +
									 "  VALUES('" + karte.getWortEins() + "', '" + karte.getWortZwei() + "', " +
									 faecher.get(0).getNummer() + ");";
		 	 					if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0)
		 	 						ret = -1;
		 	 					else {
		 	 						rs = stmt.getGeneratedKeys();
		 	 						rs.next();
		 	 						karte.nummer = rs.getInt(1);
		 	 						ret = 0;
		 	 						con.commit();
		 	 					}
		 	 				}
			 	 		} catch (SQLException e) {
			 	 			e.printStackTrace();
			 	 			ret = -1;
			 	 		} finally {
			 	 			try { rs.close(); } catch (Exception e) { ; }
			 	 			try { stmt.close(); } catch (Exception e) { ; }
			 	 			try { con.close(); } catch (Exception e) { ; }
			 	 		}
			 	 	}
				}
			}
		return ret;
	}
	
	/**
   * Ändert von einer bestehenden Karte die Wörter. Andere Eigenschaften der
	 * Karte können nicht geändert werden. Die Karte verbleibt in demselben Fach
	 * @param nummerLernkartei
	 * @param karte
	 * @return -1 falls Karte nicht in Datenbank ist oder Datenbankfehler aufgetreten ist<br>
	 * -2 falls Karte nicht vollständig ist<br>
	 * -4 falls Karte mit demselben Inhalten in irgendeinem Fach bereits vorhanden ist
	 */
	public static int aendernKarte(Karte karte) {
	  int ret = -1;
	  if (karte != null && karte.getNummer() != -1) {
	  	karte.validiere();
	  	if (karte.getFehler() != null)
	  		ret = -2;
	  	else {
	  		Connection con = null;
	  		Statement stmt = null;
	  		ResultSet rs = null;
	  		try {
	  			con = getConnection();
	  			stmt = con.createStatement();
	  			String sql = null;
	  			if (karte.grossKleinschreibung)
	  				sql =
							 "SELECT COUNT(*) " +
							 "  FROM karten k1, faecher f1, faecher f2, karten k2 " +
							 "  WHERE k1.fnummer = f1.fnummer AND " +
							 "    k1.kworteins = '" + karte.getWortEins() + "' AND " +
							 "    k1.kwortzwei = '" + karte.getWortZwei() + "' AND " +
							 "    k1.knummer <> " + karte.getNummer() + " AND " +
							 "    f1.lnummer = f2.lnummer AND " +
							 "    f2.fnummer = k2.knummer AND " +
							 "    k2.knummer = " + karte.getNummer() + ";";
	  			else
	  				sql =
								 "SELECT COUNT(*) " +
										 "  FROM karten k1, faecher f1, faecher f2, karten k2 " +
										 "  WHERE k1.fnummer = f1.fnummer AND " +
										 "    LOWER(k1.kworteins) = '" + karte.getWortEins().toLowerCase() + "' AND " +
										 "    LOWER(k1.kwortzwei) = '" + karte.getWortZwei().toLowerCase() + "' AND " +
										 "    k1.knummer <> " + karte.getNummer() + " AND " +
										 "    f1.lnummer = f2.lnummer AND " +
										 "    f2.fnummer = k2.knummer AND " +
										 "    k2.knummer = " + karte.getNummer() + ";";
	  			rs = stmt.executeQuery(sql);
	  			rs.next();
	  			if (rs.getInt(1) != 0)
	  				ret = -4;
	  			else {
	  				sql =
							 "UPDATE karten " +
							 "  SET kworteins = '" + karte.getWortEins() + "', " +
							 "    kwortzwei = '" + karte.getWortZwei() + "' " +
							 "  WHERE knummer = " + karte.getNummer() + ";";
	  				if (stmt.executeUpdate(sql) == 0)
	  					ret = -1;
	  				else {
	  					ret = 0;
	  					con.commit();
	  				}
	  			}
	  		} catch (SQLException e) {
	 				e.printStackTrace();
	 				ret = -1;
	 			} finally {
		 			try { rs.close(); } catch (Exception e) { ; }
	 				try { stmt.close(); } catch (Exception e) { ; }
	 				try { con.close(); } catch (Exception e) { ; }
	 			}
	  	}
	  }
	  return ret;
	}
	
 /**
	 * Löscht die Karte mit der übergebenen Nummer aus der Datenbank
	 * @param nummerKarte
	 * @return -1 falls Datenbankfehler aufgetreten ist oder Karte nicht
	 * gefunden wurde
	 */
	public static int loeschenKarte(int nummerKarte) {
		int ret = -1;
		Connection con = null;
		Statement stmt = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql =
					"DELETE FROM karten " +
					"  WHERE knummer = " + nummerKarte + ";";
			if (stmt.executeUpdate(sql) == 0)
				ret = -1;
			else {
				ret = 0;
				con.commit();
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = -1;
		} finally {
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Löscht aus übergebenen Lernkartei alle Fächer und somit
	 * alle Karten die den Fächern zugeordnet sind
	 * @param nummerLernkatei
	 * @return -1 falls Datenbankfehler aufgetreten ist oder Lernkartei nicht
	 * gefunden wurde
	 */
	public static int loeschenAlleFaecher(int nummerLernkartei) {
		int ret = -1;
		if (!(getLernkartei(nummerLernkartei) == null)) {
			Connection con = null;
			Statement stmt = null;
			try {
				con = getConnection();
				stmt = con.createStatement();
				String sql =
						"DELETE FROM faecher " +
						"  WHERE lnummer = " + nummerLernkartei + ";";
				stmt.executeUpdate(sql);
				con.commit();
				ret = 0;
			} catch (SQLException e) {
				e.printStackTrace();
				ret = -1;
			} finally {
				try { stmt.close(); } catch (Exception e) { ; }
				try { con.close(); } catch (Exception e) { ; }
			}
		}
		return ret;
	}
	
	/**
	 * Liefert eine Liste aller Lernkarteien in denen Fächer existieren deren
	 * Erinnerung abgelaufen ist. Eine Erinnerung läuft ab, wenn die Differenz zwischen
	 * dem heutigen Datum und dem Datum an dem zuletzt gelernt wurde größer oder gleich der
	 * Erinnerung ist. Auch werden alle Lernkarteien zurück geliefert
	 * die Fächer enthalten in denen noch nie gelernt wurde. Ist das Erinnerungsintervall 0 so
	 * werden die Fächer nicht berücksichtigt
	 * @return null falls ein Datenbankfehler aufgetreten ist<br>
	 * eine leere ArrayList falls keine Lernkarteien zu finden sind
	 */
	public static List<Lernkartei> getLernkarteienErinnerung() {
		ArrayList<Lernkartei> ret = new ArrayList();
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			String sql =
				 "SELECT l.lnummer, l.lbeschreibung, " +
				 "  l.lworteinsbeschreibung, l.lwortzweibeschreibung, " +
				 "  l.lrichtung, l.lgrosskleinschreibung " +
				 "  FROM lernkarteien l, faecher f " +
				 "  WHERE l.lnummer = f.lnummer AND " +
				 "    (f.fgelerntam IS NULL OR " +
				 "    ferinnerung <> 0 AND DATEDIFF(NOW(),f.fgelerntam) >= ferinnerung) " +
				 "  ORDER BY l.lnummer;";
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				int nummer = rs.getInt("lnummer");
				String beschreibung = rs.getString("lbeschreibung");
				String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
				String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
				boolean richtung = rs.getBoolean("lrichtung");
				boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
				Lernkartei l = new Lernkartei(nummer, beschreibung, wortEinsBeschreibung,
						wortZweiBeschreibung, richtung, grossKleinschreibung);
				ret.add(l);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
		  try { rs.close(); } catch (Exception e) { ; }
		  try { stmt.close(); } catch (Exception e) { ; }
		  try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
 /**
	 * Liefert zur übergebenen Lernkartei die Fächer bei denen die Erinnerung abgelaufen 
	 * ist
	 * @return null falls Lernkartei nicht existiert oder Datenbankfehler aufgetreten 
	 * ist<br>
	 * eine leere ArrayList wenn keine Fächer zur Lernkartei existieren bei denen die
	 * Erinnerung abgelaufen ist
	 */
	public static List<Fach> getFaecherErinnerung(int nummerLernkartei) {
		ArrayList<Fach> ret = null;
		if (getLernkartei(nummerLernkartei) != null) {
			ret = new ArrayList();
			Connection con = null;
			Statement stmt = null;
			ResultSet rs = null;
			try {
				con = getConnection();
				stmt = con.createStatement();
				String sql =
						"SELECT f.fnummer, f.fbeschreibung, f.ferinnerung, " +
						"  f.fgelerntam, f.lnummer " +
						"  FROM faecher f " +
						"  WHERE f.lnummer = " + nummerLernkartei + " AND " +
						"    (f.fgelerntam IS NULL OR " +
						"    f.ferinnerung <> 0 AND DATEDIFF(NOW(),f.fgelerntam) >= ferinnerung) " +
						"  ORDER BY f.fnummer;";
				rs = stmt.executeQuery(sql);
				while (rs.next()) {
					int nummer = rs.getInt("fnummer");
					String beschreibung = rs.getString("fbeschreibung");
					int erinnerung = rs.getInt("ferinnerung");
					Date gelerntAm = rs.getDate("fgelerntam");
					Fach f = new Fach(nummer, beschreibung, erinnerung, gelerntAm);
					ret.add(f);
				}
			} catch (SQLException e) {
				e.printStackTrace();
				ret = null;
			} finally {
				try { rs.close(); } catch (Exception e) { ; }
				try { stmt.close(); } catch (Exception e) { ; }
				try { con.close(); } catch (Exception e) { ; }
			}
		}
		return ret;
	}
	
	/**
	 * Holt die Karten des übergebenen Faches
	 * @param nummerFach
	 * @return null falls Fach nicht vorhanden oder Datenbankfehler aufgetreten ist 
	 * oder eine leere ArrayList wenn das Fach keine Karten hat
	 */
	public static ArrayList<Karte> getKarten(int nummerFach) {
		ArrayList<Karte> ret = null;
		if (getFach(nummerFach) != null) {
			Connection con = null;
			Statement stmt = null;
			ResultSet rs = null;
			try {
				con = getConnection();
				String sql = 
						"SELECT k.knummer, kworteins, kwortzwei, l.lrichtung, l.lgrosskleinschreibung " +
						"  FROM karten k, faecher f, lernkarteien l " +
						"  WHERE k.fnummer = f.fnummer AND " +
						"    f.lnummer = l.lnummer AND " +
						"    k.fnummer = " + nummerFach + ";";
				stmt = con.createStatement();
				rs = stmt.executeQuery(sql);
				ret = new ArrayList();
				while (rs.next()) {
					int nummer = rs.getInt("knummer");
					String wortEins = rs.getString("kworteins");
					String wortZwei = rs.getString("kwortzwei");
					boolean richtung = rs.getBoolean("lrichtung");
					boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
					Karte k = new Karte(nummer, wortEins, wortZwei, richtung, grossKleinschreibung);
					ret.add(k);
				}
			} catch (SQLException e) {
				e.printStackTrace();
				ret = null;
			} finally {
				try { rs.close(); } catch (SQLException e) { ; }
				try { stmt.close(); } catch (SQLException e) { ; }
				try { con.close(); } catch (SQLException e) { ; }
			}
		}
		return ret;
	}
	
	/**
	 * Importiert Karten in die Lernkartei deren Nummer übergeben wird. Sollte diese
	 * schon Fächer und Karten haben, so werden diese vorher gelöscht.
	 * Tritt beim Importieren ein Fehler auf, so wird das Löschen rückgängig
	 * gemacht.<br>
	 * Die unterstützten Formate für den Import sind:<br>
	 * Haus; house<br>
	 * Strauch; shrub<br>
	 * Zaun; fence<br>
	 * Garten; Garden<br>
	 * Ziegel; brick<br>
	 * Schornstein; chimney<br>
	 * Bei diesem Format werden alle Karten in ein einziges neues Fach geworfen.<br>
	 * Haus; house; 0<br>
	 * Strauch; shrub; 1<br>
	 * Zaun; fence; 0<br>
	 * Garten; Garden; 1<br>
	 * Ziegel; brick; 2<br>
	 * Schornstein; chimney; 1<br>
	 * Hier gibt die dritte Spalte die Zugehörigkeit zu den Fächern wieder, welche
	 * ebenfalls neu angelegt werden. Doppelt vorhandene Karten werden nicht importiert
	 * @nummerLernkartei
	 * @param pfad
	 * @return -1 falls Importierfehler aufgetreten ist<br>
	 * -2 falls Datei nicht gefunden wurde<br>
	 * -3 falls Lernkartei nicht vorhanden ist
	 */
	public static int importierenKarten(int nummerLernkartei, String pfad) {
		int ret = -1;
		Lernkartei l = getLernkartei(nummerLernkartei);
		if (l == null) 
			ret = -3;
		else
			if (pfad != null && pfad.length() > 0) {
				BufferedReader reader = null;
				Connection con = null;
				Statement stmt = null;
				ResultSet rs = null;
				try {
					con = getConnection();
					stmt = con.createStatement();
					reader = new BufferedReader(new FileReader(pfad));
				
					boolean geloescht = false;
					Hashtable<Integer, Fach> faecher = new Hashtable();
					int anzahlSpalten = -1;
					int fachNummer = -1;
					Fach fach = null;
					while (true) {
						String zeile = reader.readLine();
						if (zeile == null)
							// Dateiende erkannt
							break;
						else {
							String[] inhalte = zeile.split(";");
							String wortEins = inhalte[0].trim();
							String wortZwei = inhalte[1].trim();
							if (inhalte.length == 3) {
								fachNummer = -1;
								fach = null;
							}
							if (anzahlSpalten != -1 && anzahlSpalten != inhalte.length) {
								ret = -1;
								break;
							}
							if (inhalte.length == 3)
								fachNummer = Integer.valueOf(inhalte[2].trim());
							if (wortEins == null || wortEins.length() == 0 ||
									wortZwei == null || wortZwei.length() == 0) {
								ret = -1;
								break;
							}
							if (!geloescht) {
								geloescht = true;
								anzahlSpalten = inhalte.length;
								String sql =
										"DELETE FROM faecher " +
										"  WHERE lnummer = " + nummerLernkartei + ";";
								stmt.executeUpdate(sql);
								if (anzahlSpalten == 2) {
									sql =
											"INSERT INTO faecher(lnummer) " +
													"  VALUES(" + nummerLernkartei + ");";
									stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
									rs = stmt.getGeneratedKeys();
									rs.next();
									fach = new Fach();
									fach.nummer = rs.getInt(1);
								}
							}
							if (anzahlSpalten == 3) {
								fach = faecher.get(fachNummer);
								if (fach == null) {
									fach = new Fach();
									String sql =
											"INSERT INTO faecher(lnummer) " +
													"  VALUES (" + nummerLernkartei + ");";
									if (stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS) == 0) {
										ret = -1;
										break;
									} else {
										rs = stmt.getGeneratedKeys();
										rs.next();
										fach.nummer = rs.getInt(1);
										faecher.put(fachNummer, fach);
									}
								}
							}
							Karte k = new Karte();
							k.setWortEins(wortEins);
							k.setWortZwei(wortZwei);
							String sql = null;
							if (l.grossKleinschreibung)
								sql =
										"SELECT COUNT(*) " +
										"  FROM karten " +
										"  WHERE kworteins = '" + k.getWortEins() + "' AND " +
										"    kwortzwei = '" + k.getWortZwei() + "';";
							else
								sql =
										"SELECT COUNT(*) " +
										"  FROM karten " +
										"  WHERE LOWER(kworteins) = '" + k.getWortEins().toLowerCase() + "' AND " +
										"    LOWER(kwortzwei) = '" + k.getWortZwei().toLowerCase() + "';";
							rs = stmt.executeQuery(sql);
							if (rs.next() && rs.getInt(1) == 0) {
								sql =
										"INSERT INTO karten(kworteins, kwortzwei, fnummer) " +
										"  VALUES('" + k.getWortEins() + "', '" + k.getWortZwei() + "', " +
										fach.getNummer() + ");";
								if (stmt.executeUpdate(sql) == 0) {
									ret = -1;
									break;
								}
								ret = 0;
							}
						}
					}
					if (ret == 0)
						con.commit();
					else
						con.rollback();
				} catch (SQLException e) {
					e.printStackTrace();
					try { con.rollback(); } catch (Exception e1) { ; }
					ret = -1;
				} catch (FileNotFoundException e) {
					try { con.rollback(); } catch (Exception e1) { ; }
						ret = -2;
				} catch (Exception e) {
					try { con.rollback(); } catch (Exception e1) { ; }
					ret = -1;
				} finally {
					try { reader.close(); } catch (Exception e) { ; }
					try { rs.close(); } catch (Exception e) { ; }
					try { stmt.close(); } catch (Exception e) { ; }
					try { con.close(); } catch (Exception e) { ; }
				}
			}
		return ret;
	}
	
	/**
	 * Exportiert alle Karten der übergebenen Lernkartei in eine Textdatei mit oder ohne Fächer.
	 * Dabei wird die Fachnummer am Ende jeder Zeile hinzugefügt
	 * @param nummerLernkartei
	 * @param pfad
	 * @param mitFaechern
	 * @return -1 falls Datenbankfehler oder Schreibfehler in Datei aufgetreten ist<br>
	 * -3 falls Lernkartei nicht existiert
	 */
  public static int exportierenKarten(int nummerLernkartei, String pfad, boolean mitFaechern) {
  	int ret = -1;
  	if (getLernkartei(nummerLernkartei) == null) 
  		ret = -3;
  	else 
  		if (pfad != null && pfad.length() > 0) {
  			BufferedWriter writer = null;
  			Connection con = null;
  			Statement stmt = null;
  			ResultSet rs = null;
  			try {
  				writer = new BufferedWriter(new FileWriter(pfad));
  				con = getConnection();
  				stmt = con.createStatement();
  				String sql =
  						"SELECT kworteins, kwortzwei, fnummer " +
  						"  FROM karten, faecher " +
  						"  WHERE karten.fnummer = faecher.fnummer AND " +
  						"    faecher.lnummer = " + nummerLernkartei +
  						"  ORDER BY faecher.fnummer;";
  				rs = stmt.executeQuery(sql);
  				while (rs.next()) {
  					String zeile = null;
  					if (mitFaechern)
  						zeile = rs.getString("kworteins") + "; " +
  								rs.getString("kwortzwei") + "; " +
  								rs.getInt("fnummer") + "\n";
  					else
  						zeile = rs.getString("kworteins") + "; " +
  								rs.getString("kwortzwei") + "; " + "\n";
  					writer.write(zeile);
  				}
  				ret = 0;
  			} catch (IOException | SQLException e) {
  				e.printStackTrace();
  				ret = -1;
  			} finally {
  				try { writer.close(); } catch (Exception e) { ; }
  				try { rs.close(); } catch (Exception e) { ; }
  				try { stmt.close(); } catch (Exception e) { ; }
  				try { con.close(); } catch (Exception e) { ; }
  			}
  		}
  	
	 	return ret;
	}
	
	/**
	 * Wenn eine Lernkartei als Standard festgelegt wurde, dann wird
	 * diese zurück geliefert
	 * @return Lernkartei die als Standardlernkartei gesetzt wurde<br>
	 * null falls Datenbankfehler aufgetreten ist oder noch keine
	 * Lernkartei als Standard gesetzt wurde
	 */
	public static Lernkartei getEinstellungenStandardLernkartei() {
		Lernkartei ret = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = VokabeltrainerDB.getConnection();
			stmt = con.createStatement();
			String sql =
					"SELECT l.lnummer, l.lbeschreibung, l.lworteinsbeschreibung, l.lwortzweibeschreibung, " +
					"    l.lrichtung, l.lgrosskleinschreibung " +
					"  FROM einstellungen e, lernkarteien l " +
					"  WHERE e.elnummerstandard = l.lnummer;";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				int nummer = rs.getInt("lnummer");
				String beschreibung = rs.getString("lbeschreibung");
				String wortEinsBeschreibung = rs.getString("lworteinsbeschreibung");
				String wortZweiBeschreibung = rs.getString("lwortzweibeschreibung");
				boolean richtung = rs.getBoolean("lrichtung");
				boolean grossKleinschreibung = rs.getBoolean("lgrosskleinschreibung");
				ret = new Lernkartei(nummer, beschreibung, wortEinsBeschreibung,
						wortZweiBeschreibung, richtung, grossKleinschreibung);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = null;
		} finally {
			try { rs.close(); } catch (Exception e) { ; }
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Setzt die übergebene Lernkartei als Standardlernkartei, welche beim
	 * Öffnen verwendet wird. Wird der Methode -1 übergeben, so wird der Eintrag
	 * für Standardlernkartei gelöscht
	 * @param nummerLernkartei
	 * @return -1 falls Lernkartei nicht gefunden wurde oder Datenbankfehler
	 * aufgetreten ist
	 */
	public static int setEinstellungenStandardLernkartei(int nummerLernkartei) {
		int ret = -1;
		Connection con = null;
		Statement stmt = null;
		try {
			con = VokabeltrainerDB.getConnection();
			stmt = con.createStatement();
			String sql = null;
			if (nummerLernkartei == -1)
				sql = 
						"UPDATE einstellungen " +
						"  SET elnummerstandard = null;";
			else
				sql =
						"UPDATE einstellungen " +
						"  SET elnummerstandard = " + nummerLernkartei + ";";
			if (stmt.executeUpdate(sql) == 1) {
				con.commit();
				ret = 0;
			}
		} catch (SQLException e) {
			if (e.getErrorCode() != -177)
				e.printStackTrace();
			ret = -1;
		} finally {
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Legt fest, dass Benutzer nur in Lernkarteien mit Erinnerung lernen möchte
	 * @param lernkarteienMitErinnerung
	 * @return -1 falls Datenbankfehler aufgetreten ist
	 */
	public static int setEinstellungenLernkarteienMitErinnerung(boolean
		lernkarteienMitErinnerung) {
		int ret = -1;
		Connection con = null;
		Statement stmt = null;
		try {
			con = VokabeltrainerDB.getConnection();
			stmt = con.createStatement();
			String sql =
					"UPDATE einstellungen " +
					"  SET elernkarteienmiterinnerung = " + lernkarteienMitErinnerung + ";";
			if (stmt.executeUpdate(sql) == 1) {
				con.commit();
				ret = 0;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			ret = -1;
		} finally {
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/**
	 * Liefert zurück ob der Benutzer nur in Lernkarteien mit abgelaufener Erinnerung
	 * lernen möchte
	 * @return false falls noch keine Einstellung getroffen wurde
	 */
	public static boolean getEinstellungenLernkarteienMitErinnerung() {
		boolean ret = false;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			con = VokabeltrainerDB.getConnection();
			stmt = con.createStatement();
			String sql =
					"SELECT elernkarteienmiterinnerung " +
					"  FROM einstellungen;";
			rs = stmt.executeQuery(sql);
			if (rs.next())
				ret = rs.getBoolean("elernkarteienmiterinnerung");
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try { rs.close(); } catch (Exception e) { ; }
			try { stmt.close(); } catch (Exception e) { ; }
			try { con.close(); } catch (Exception e) { ; }
		}
		return ret;
	}
	
	/*
	 * Hilfsmethoden zur Datumsmanipulation
	 */
	protected static String getActualDate() {
		return new SimpleDateFormat("yyyy-MM-dd").format(new Date());
	}

	protected static Date getDateOneDayBeforeToday() {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		cal.add(Calendar.DAY_OF_WEEK, -1);
		return cal.getTime();
	}

	protected static String convertToString(Date date) {
		String ret = null;
		if (date == null)
			ret = "NULL";
		else
			ret = new SimpleDateFormat("yyyy-MM-dd").format(date);
		return ret;
	}
}
